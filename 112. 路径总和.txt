https://leetcode.cn/problems/path-sum/

方法：递归
询问是否存在从当前节点 root 到叶子节点的路径，满足其路径和为 sum。

假定从根节点到当前节点的值之和为 val，我们可以将这个大问题转化为一个小问题：是否存在从当前节点的子节点到叶子的路径，满足其路径和为 sum - val。

若当前节点就是叶子节点，直接判断 sum 是否等于 val 即可（因为路径和已经确定，就是当前节点的值，只需要判断该路径和是否满足条件）。若当前节点不是叶子节点，只需要递归地询问它的子节点是否能满足条件即可。
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(root==nullptr){
            return false;
        }

        int num=targetSum-(int)root->val;
        if((num==0)&&root->left==nullptr&&root->right==nullptr){
            return true;
        }
        else if((root->left)&& hasPathSum(root->left,num)){
            return true;
        }else if((root->right)&& hasPathSum(root->right,num)){
            return true;
        }
        return false;
    }
};


方法二：广度优先搜索

使用广度优先搜索的方式，记录从根节点到当前节点的路径和，以防止重复计算。

使用两个队列，分别存储将要遍历的节点，以及根节点到这些节点的路径和即可。


class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(root==nullptr){
            return false;
        }

        queue<TreeNode*> qnode;
        queue<int> qnum;

        qnode.push(root);
        qnum.push(root->val);

        while(!qnode.empty()){
            TreeNode* curnode=qnode.front();
            int curnum=qnum.front();
            qnode.pop();
            qnum.pop();

            if(curnode->left==nullptr &&curnode->right==nullptr 
               && curnum==targetSum){
                return true;
            }
            if(curnode->left!=nullptr){
                qnode.push(curnode->left);
                qnum.push(curnode->left->val+curnum);
            }
            if(curnode->right!=nullptr){
                qnode.push(curnode->right);
                qnum.push(curnode->right->val+curnum);
            }
        }
        return false;
    }
};









